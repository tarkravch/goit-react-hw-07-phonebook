{"version":3,"sources":["components/contact-list/ContactList.module.css","components/Container/Container.module.css","components/contact-form/ContactForm.module.css","redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-operations.js","redux/phonebook/phonebook-reducer.js","redux/store.js","redux/phonebook/contact-selectors.js","components/contact-form/ContactForm.js","components/contact-list/ContactList.js","components/filter/Filter.js","components/Container/Container.js","App.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterByName","axios","defaults","baseURL","name","number","dispatch","contact","post","then","data","catch","error","id","delete","a","get","items","createReducer","initialContacts","state","action","payload","filter","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","contactsReducer","devTools","process","getFilter","getAllContacts","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","contactsToCheck","getState","length","map","push","alert","props","onSubmit","reset","nameInputId","shortid","generate","numberInputId","this","fetchContact","className","styles","form","htmlFor","form__label","form__input","type","pattern","title","required","onChange","form__btn","Component","connect","text","contactOperations","contactSelectors","onDeleteContact","list","itemName","list__item","onClick","list__btn","e","contactActions","target","Container","children","container","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87c9a36c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__4OYAh\",\"list__item\":\"ContactList_list__item__2kxHq\",\"list__btn\":\"ContactList_list__btn__1Yw_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1dgM8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__EwVyi\",\"form__label\":\"ContactForm_form__label__2L8Li\",\"form__input\":\"ContactForm_form__input__11DpB\",\"form__btn\":\"ContactForm_form__btn__HE5bS\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactRequest = createAction(\"contacts/fetchContactRequest\");\r\nexport const fetchContactSuccess = createAction(\"contacts/fetchContactSuccess\");\r\nexport const fetchContactError = createAction(\"contacts/fetchContactError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n\r\nexport const deleteContactRequest = createAction(\r\n  \"contacts/deleteContactRequest\"\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  \"contacts/deleteContactSuccess\"\r\n);\r\nexport const deleteContactError = createAction(\"contacts/deleteContactError\");\r\n\r\nexport const filterByName = createAction(\"contacts/filterByName\");\r\n","import axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from \"../../redux/phonebook/phonebook-actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\n\r\n\r\nconst fetchContact = () => async (dispatch) => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  (dispatch) => {\r\n    const contact = { name, number };\r\n    dispatch(addContactRequest());\r\n    axios\r\n      .post(\"/contacts\", contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch((error) => dispatch(addContactError(error)));\r\n  };\r\n\r\nconst deleteContact = (id) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch((error) => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContact,\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport initialContacts from \"../../components/contactArr.json\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  filterByName,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from \"./phonebook-actions\";\r\n\r\nconst items = createReducer(initialContacts, {\r\n  [fetchContactSuccess]: (state, action) => action.payload,\r\n  [addContactSuccess]: (state, action) => [...state, action.payload],\r\n  [deleteContactSuccess]: (state, action) =>\r\n    state.filter(({ id }) => id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [filterByName]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  \r\n});\r\n","import logger from \"redux-logger\";\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./phonebook/phonebook-reducer\";\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default store;\r\n","import {createSelector} from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n\r\nconst getVisibleContacts = createSelector([getAllContacts, getFilter],\r\n(contacts, filter) => { /* порядок селекторів має відповідати порядку функцій в масиві! */\r\n\tconst normalizedFilter = filter.toLowerCase();\r\n\treturn contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n});\r\n\r\nexport default {\r\n\tgetFilter,\r\n\tgetVisibleContacts,\r\n\tgetAllContacts\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactOperations from \"../../redux/phonebook/phonebook-operations\";\r\nimport shortid from \"shortid\";\r\nimport styles from \"../contact-form/ContactForm.module.css\";\r\nimport store from \"../../redux/store\";\r\nimport contactSelectors from '../../redux/phonebook/contact-selectors';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContact();\r\n  }\r\n  handleChange = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    let contactsToCheck = [];\r\n    if (store.getState().contacts.items.length > 0) {\r\n      const checkedContacts = store.getState().contacts.items.map((contact) => {\r\n        return contactsToCheck.push(contact.name);\r\n      });\r\n    }\r\n    if (\r\n      !contactsToCheck.includes(this.state.name) &&\r\n      contactsToCheck.length !== 0\r\n    ) {\r\n      this.props.onSubmit(this.state); /* передаємо значення на проп onSubmit */\r\n      this.reset();\r\n      contactsToCheck = [];\r\n      return;\r\n    }\r\n    return alert(`${this.state.name} is already in the contacts`);\r\n  };\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit} className={styles.form}>\r\n          <label htmlFor={this.nameInputId} className={styles.form__label}>\r\n            Name\r\n            <input\r\n              className={styles.form__input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n              id={this.nameInputId}\r\n            />\r\n          </label>\r\n          <label htmlFor={this.numberInputId} className={styles.form__label}>\r\n            Number\r\n            <input\r\n              className={styles.form__input}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n              id={this.numberInputId}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" className={styles.form__btn}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state =>({\r\n  isLoadingContacts: contactSelectors.getLoading(state),\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (text) => dispatch(contactOperations.addContact(text)),\r\n  fetchContact: () => dispatch(contactOperations.fetchContact()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactOperations from \"../../redux/phonebook/phonebook-operations\";\r\nimport styles from \"../contact-list/ContactList.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactSelectors from '../../redux/phonebook/contact-selectors';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <div>\r\n    <ul className={styles.list}>\r\n      {contacts.map((itemName) => (\r\n        <li key={itemName.id} className={styles.list__item}>\r\n          {itemName.name}: {itemName.number}\r\n          <button\r\n            onClick={() => onDeleteContact(itemName.id)}\r\n            className={styles.list__btn}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    contacts: contactSelectors.getVisibleContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport * as contactActions from \"../../redux/phonebook/phonebook-actions\";\r\nimport contactSelectors from '../../redux/phonebook/contact-selectors';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div>\r\n    <label>\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: contactSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => {\r\n    dispatch(contactActions.filterByName(e.target.value));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport styles from \"../Container/Container.module.css\";\r\nconst Container = ({ children }) => (\r\n  <>{<div className={styles.container}>{children}</div>}</>\r\n);\r\n\r\nexport default Container;\r\n","import React from \"react\";\nimport ContactForm from \"./components/contact-form/ContactForm\";\nimport ContactList from \"./components/contact-list/ContactList\";\nimport Filter from \"./components/filter/Filter\";\nimport Container from \"./components/Container/Container\";\n\nconst App = () => {\n  return (\n    <>\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <p>Find contacts by name</p>\n        <Filter />\n        <ContactList />\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}